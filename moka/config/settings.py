"""
Django settings for moka project.

Generated by 'django-admin startproject' using Django 3.2.11.

For more information on this file, see
https://docs.djangoproject.com/en/3.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.2/ref/settings/
"""
import io
import os
from pathlib import Path
from urllib.parse import urlparse

import environ
import firebase_admin
import google.auth
from firebase_admin import credentials
from google.cloud import secretmanager
from google.oauth2 import service_account

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

env = environ.Env(
    DEBUG=(bool, False),
)

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = env("DEBUG", default=False)

# prod, dev
SYSTEM_ENV = env("SYSTEM_ENV", default="dev")

# Attempt to load the Project ID into the environment, safely failing on error.
try:
    # We don't need application credentials json in prod
    # service account would have all the permissions
    _, os.environ["GOOGLE_CLOUD_PROJECT"] = google.auth.default()
except google.auth.exceptions.DefaultCredentialsError:
    pass

if os.getenv("GOOGLE_CLOUD_PROJECT", None):  # This is prod
    print("Initiating production")
    # Pull secrets from Secret Manager
    project_id = os.environ.get("GOOGLE_CLOUD_PROJECT")

    client = secretmanager.SecretManagerServiceClient()
    settings_name = os.environ.get("SETTINGS_NAME", "moka_prod")
    name = f"projects/{project_id}/secrets/{settings_name}/versions/latest"
    payload = client.access_secret_version(name=name).payload.data.decode("UTF-8")
    env.read_env(io.StringIO(payload))
    if len(firebase_admin._apps) > 0:
        firebase_admin.get_app()
    else:
        firebase_admin.initialize_app()
elif SYSTEM_ENV == "dev":
    print("Initiating dev")
    # Create a service account. (Google Getting Started Guide)
    # Make sure your service account has access to the bucket and appropriate permissions.
    # Ensure this service account is associated to the type of compute being used
    # For development use cases, or other instances outside Google infrastructure:
    # Create the key and download your-project-XXXXX.json file.
    # Ensure the key is mounted/available to your running Django app.
    # Set an environment variable of GOOGLE_APPLICATION_CREDENTIALS to the path of the json file.
    FIREBASE_APPLICATION_CREDENTIALS = env("FIREBASE_APPLICATION_CREDENTIALS")
    firebase_cred = credentials.Certificate(FIREBASE_APPLICATION_CREDENTIALS)
    firebase_admin.initialize_app(firebase_cred)
    GS_CREDENTIALS = service_account.Credentials.from_service_account_file(
        env("GS_CREDENTIALS")
    )
else:
    raise Exception("No local .env or GOOGLE_CLOUD_PROJECT detected. No secrets found.")

# Re-read SYSTEM_ENV
SYSTEM_ENV = env("SYSTEM_ENV", default="dev")

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = env("SECRET_KEY", default=None)  # Django secret key

# Cloudflare Images
CLOUDFLARE_ACCOUNT_ID = env("CLOUDFLARE_ACCOUNT_ID", default=None)
CLOUDFLARE_IMAGES_API_TOKEN = env("CLOUDFLARE_IMAGES_API_TOKEN", default=None)
CLOUDFLARE_IMAGES_ACCOUNT_HASH = env("CLOUDFLARE_IMAGES_ACCOUNT_HASH", default=None)
CLOUDFLARE_IMAGES_DOMAIN = env("CLOUDFLARE_IMAGES_DOMAIN", default=None)

# GCS
GCS_BUCKET_NAME = env("GCS_BUCKET_NAME")
GCS_BACKEND_NAME = env("GCS_BACKEND_NAME")
GC_CDN_SIGNING_KEY = env("GC_CDN_SIGNING_KEY")
GC_CDN_SIGNING_KEY_NAME = env("GC_CDN_SIGNING_KEY_NAME")
GC_CDN_HOSTNAME = env("GC_CDN_HOSTNAME")

POSTGRES_NAME = env("POSTGRES_NAME")
POSTGRES_USER = env("POSTGRES_USER")
POSTGRES_PASSWORD = env("POSTGRES_PASSWORD")
POSTGRES_HOST = env("POSTGRES_HOST")
POSTGRES_PORT = env("POSTGRES_PORT")

CUSTOM_BE_DOMAIN = env("CUSTOM_BE_DOMAIN")

# CORS
# https://medium.com/django-rest/django-enabling-cors-9d024351e8f2
CSRF_TRUSTED_ORIGINS = []
CSRF_COOKIE_DOMAIN = ""
CLIENT_URL = ""
if SYSTEM_ENV == "prod":
    CSRF_TRUSTED_ORIGINS.extend(
        [
            ".mochajump.com",
            ".mochajump.com/",
            "mochajump.com",
            "mochajump.com/",
        ]
    )
    CSRF_COOKIE_DOMAIN = "mochajump.com"
    CLIENT_URL = "https://mochajump.com"
else:
    CSRF_TRUSTED_ORIGINS.extend(
        [
            "localhost:3000",
            "localhost:8000",
        ]
    )
    CSRF_COOKIE_DOMAIN = "localhost"
    CLIENT_URL = "http://localhost:3000"
print("CSRF trusted origins", CSRF_TRUSTED_ORIGINS)
CSRF_COOKIE_NAME = "csrftoken"
CSRF_COOKIE_HTTPONLY = False
CSRF_COOKIE_SAMESITE = "Strict"
CSRF_COOKIE_SECURE = False
CSRF_FAILURE_VIEW = "common.errors.csrf_failure"

CORS_ALLOWED_ORIGINS = []
if SYSTEM_ENV == "prod":
    CORS_ALLOWED_ORIGINS.extend(
        [
            CLIENT_URL,
        ]
    )
else:
    CORS_ALLOWED_ORIGINS.extend(
        [
            CLIENT_URL,
            "http://localhost:8000",
        ]
    )
print("CORS allowed origins", CORS_ALLOWED_ORIGINS)
CORS_ALLOW_CREDENTIALS = True
CORS_ORIGIN_ALLOW_ALL = False


CLOUDRUN_SERVICE_URL = env("CLOUDRUN_SERVICE_URL", default=None)
if CLOUDRUN_SERVICE_URL:
    ALLOWED_HOSTS = [
        urlparse(CLOUDRUN_SERVICE_URL).netloc,
        CUSTOM_BE_DOMAIN,
    ]
    CSRF_TRUSTED_ORIGINS.append(CLOUDRUN_SERVICE_URL)
    SECURE_SSL_REDIRECT = True
    SECURE_PROXY_SSL_HEADER = ("HTTP_X_FORWARDED_PROTO", "https")
else:
    ALLOWED_HOSTS = [
        "localhost",
        "127.0.0.1",
        "http://localhost:3000",
    ]

# Application definition
INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "corsheaders",
    "taggit",
    # Mocha Jump apps
    "common",
    "moka_profile",
    "image",
    "discovery",
    "series",
    "episode",
    "collection",
    "money",
    "comment",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "corsheaders.middleware.CorsMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "config.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "config.wsgi.application"

# Cache
# https://cloud.google.com/blog/topics/developers-practitioners/using-memorystore-redis-cache-your-django-applications
REDIS_CACHE_LOCATION = env("REDIS_URL")
CACHES = {
    "default": {
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": REDIS_CACHE_LOCATION,
        "OPTIONS": {
            "IGNORE_EXCEPTIONS": True,  # Don't bring down app if Redis is down
            "CONNECTION_POOL_KWARGS": {
                "max_connections": 50,
                "retry_on_timeout": True,
            },
            "PARSER_CLASS": "redis.connection.HiredisParser",  # Higher performance parsing
            "SERIALIZER": "django_redis.serializers.json.JSONSerializer",
        },
    },
}

LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "formatters": {
        "default": {
            "format": "[DJANGO] %(levelname)s %(asctime)s %(module)s "
            "%(name)s.%(funcName)s:%(lineno)s: %(message)s"
        },
    },
    "handlers": {
        "console": {
            "level": "DEBUG",
            "class": "logging.StreamHandler",
            "formatter": "default",
        }
    },
    "loggers": {
        "*": {
            "handlers": ["console"],
            "level": "DEBUG",
            "propagate": True,
        }
    },
}

# Database
# https://docs.djangoproject.com/en/3.2/ref/settings/#databases
if SYSTEM_ENV == "prod":
    DATABASES = {
        # See DATABASE_URL env var in secret manager
        "default": env.db()
    }
else:
    DATABASES = {
        "default": {
            "ENGINE": "django.db.backends.postgresql",
            "NAME": POSTGRES_NAME,
            "USER": POSTGRES_USER,
            "PASSWORD": POSTGRES_PASSWORD,
            "HOST": POSTGRES_HOST,
            "PORT": POSTGRES_PORT,
        }
    }

# # If the flag as been set, configure to use proxy
if os.getenv("USE_CLOUD_SQL_AUTH_PROXY", None):
    print("Using cloud sql auth proxy")
    DATABASES["default"]["HOST"] = "127.0.0.1"
    DATABASES["default"]["PORT"] = 5432

    if os.getenv("USE_LOCAL_SQL_AUTH_PROXY", False):
        # https://medium.com/@rahulxsharma/django-on-google-cloud-run-3f2f93ae0917
        DATABASES["default"]["HOST"] = "cloudsql-proxy"

CONN_MAX_AGE = 50


# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators
# Auth

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]

# Internationalization
# https://docs.djangoproject.com/en/3.2/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_L10N = True

USE_TZ = True


# https://www.pluralsight.com/guides/introduction-to-django-templates
TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [os.path.join(BASE_DIR, "templates")],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

# Default primary key field type
# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# Taggit
# https://django-taggit.readthedocs.io/en/latest/getting_started.html#getting-started
TAGGIT_CASE_INSENSITIVE = True

# If you are using an endpoint defined with the API or dashboard, look in your webhook settings
# at https://dashboard.stripe.com/webhooks
STRIPE_API_KEY = env("STRIPE_API_KEY")
STRIPE_ENDPOINT_SECRET = env("STRIPE_ENDPOINT_SECRET")

# Static files (CSS, JavaScript, Images)
# [START cloudrun_django_static_config]
# Define static storage via django-storages[google]
GS_BUCKET_NAME = env("GS_BUCKET_NAME")
STATIC_URL = "/static/"
DEFAULT_FILE_STORAGE = "storages.backends.gcloud.GoogleCloudStorage"
STATICFILES_STORAGE = "storages.backends.gcloud.GoogleCloudStorage"
GS_DEFAULT_ACL = "publicRead"
# [END cloudrun_django_static_config]
